
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Backend.Analizadores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import Backend.Herramientas.Herramienta;
import Backend.Manejadores.ManejadorGraficacion;
import Backend.Manejadores.ManejadorReportes;
import Backend.Analizadores.AnalizadorSemantico;
import Backend.Manejadores.ManejadorErroresExtra;
import Backend.Objetos.Auxiliares.Atributos.Atributo;
import Backend.Objetos.Auxiliares.Simbolo;
import Backend.Objetos.Auxiliares.Atributos.Contenido.ContenidoCadena;
import Backend.Objetos.Auxiliares.Atributos.Contenido.ContenidoNumero;
import Backend.Objetos.Auxiliares.Atributos.Contenido.ContenidoListaCadenas;
import Backend.Objetos.Auxiliares.Atributos.Contenido.ContenidoListaNumeros;
import Backend.Objetos.Auxiliares.Atributos.Contenido.ContenidoTuplas;
import Backend.Objetos.Reportes.Reporte;
import Backend.Objetos.Reportes.ReporteError;
import Backend.Analizadores.ParserSym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\005\006\000\002\005\006\000" +
    "\002\005\003\000\002\006\006\000\002\006\003\000\002" +
    "\007\004\000\002\007\003\000\002\010\011\000\002\010" +
    "\007\000\002\010\004\000\002\011\005\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\011\003\000" +
    "\002\012\010\000\002\012\011\000\002\012\003\000\002" +
    "\013\004\000\002\013\003\000\002\014\005\000\002\014" +
    "\007\000\002\014\007\000\002\014\007\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\020\004\000\002\020\005\000\002" +
    "\021\004\000\002\021\003\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\003\005\024\006\042\010\001\002\000" +
    "\006\024\ufffc\042\ufffc\001\002\000\004\002\ufffe\001\002" +
    "\000\010\003\025\025\026\026\027\001\002\000\006\024" +
    "\006\042\010\001\002\000\004\020\016\001\002\000\006" +
    "\002\uffff\042\010\001\002\000\006\002\uffcd\042\uffcd\001" +
    "\002\000\004\002\014\001\002\000\004\002\001\001\002" +
    "\000\006\002\uffce\042\uffce\001\002\000\004\005\017\001" +
    "\002\000\004\021\020\001\002\000\004\013\021\001\002" +
    "\000\006\002\uffcc\042\uffcc\001\002\000\006\024\ufffd\042" +
    "\ufffd\001\002\000\006\002\000\042\010\001\002\000\006" +
    "\024\ufffb\042\ufffb\001\002\000\006\024\ufff8\042\ufff8\001" +
    "\002\000\004\014\151\001\002\000\004\014\030\001\002" +
    "\000\022\003\040\027\032\032\042\033\036\034\041\035" +
    "\037\036\035\041\043\001\002\000\022\003\143\027\032" +
    "\032\042\033\036\034\041\035\037\036\035\041\043\001" +
    "\002\000\004\016\140\001\002\000\004\015\137\001\002" +
    "\000\004\013\136\001\002\000\004\016\134\001\002\000" +
    "\004\016\123\001\002\000\004\016\115\001\002\000\026" +
    "\003\uffe7\013\uffdf\015\uffe9\027\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\041\uffe7\001\002\000\004\016\056" +
    "\001\002\000\004\016\046\001\002\000\004\016\044\001" +
    "\002\000\004\005\045\001\002\000\004\013\uffe2\001\002" +
    "\000\004\022\047\001\002\000\006\003\050\005\051\001" +
    "\002\000\006\017\uffd9\023\uffd9\001\002\000\006\017\uffda" +
    "\023\uffda\001\002\000\006\017\053\023\054\001\002\000" +
    "\004\005\055\001\002\000\004\013\uffe4\001\002\000\006" +
    "\017\uffdb\023\uffdb\001\002\000\004\022\057\001\002\000" +
    "\006\003\060\014\062\001\002\000\004\017\114\001\002" +
    "\000\006\017\105\023\106\001\002\000\010\004\063\007" +
    "\064\020\066\001\002\000\024\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\015\uffd1\017\uffd1\021\uffd1\023\uffd1\001" +
    "\002\000\010\004\063\007\064\020\066\001\002\000\014" +
    "\006\072\007\070\010\074\011\073\017\101\001\002\000" +
    "\010\004\063\007\064\020\066\001\002\000\014\006\072" +
    "\007\070\010\074\011\073\021\071\001\002\000\010\004" +
    "\063\007\064\020\066\001\002\000\024\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\013\uffcf\015\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\001\002\000\010\004\063\007\064\020\066\001\002" +
    "\000\010\004\063\007\064\020\066\001\002\000\010\004" +
    "\063\007\064\020\066\001\002\000\024\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3\021\uffd3\023" +
    "\uffd3\001\002\000\024\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\013\uffd2\015\uffd2\017\uffd2\021\uffd2\023\uffd2\001\002\000" +
    "\024\006\uffd5\007\uffd5\010\074\011\073\013\uffd5\015\uffd5" +
    "\017\uffd5\021\uffd5\023\uffd5\001\002\000\024\006\uffd4\007" +
    "\uffd4\010\074\011\073\013\uffd4\015\uffd4\017\uffd4\021\uffd4" +
    "\023\uffd4\001\002\000\010\004\063\007\064\020\066\001" +
    "\002\000\014\006\072\007\070\010\074\011\073\015\103" +
    "\001\002\000\006\017\ufff2\023\ufff2\001\002\000\024\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\021\uffd0\023\uffd0\001\002\000\004\014\107\001\002\000" +
    "\004\013\uffe5\001\002\000\010\004\063\007\064\020\066" +
    "\001\002\000\014\006\072\007\070\010\074\011\073\017" +
    "\111\001\002\000\010\004\063\007\064\020\066\001\002" +
    "\000\014\006\072\007\070\010\074\011\073\015\113\001" +
    "\002\000\006\017\ufff3\023\ufff3\001\002\000\006\017\ufff1" +
    "\023\ufff1\001\002\000\010\003\120\037\117\040\121\001" +
    "\002\000\004\013\uffe1\001\002\000\004\013\uffde\001\002" +
    "\000\004\013\122\001\002\000\004\013\uffdd\001\002\000" +
    "\004\013\uffdc\001\002\000\004\022\124\001\002\000\012" +
    "\003\126\004\063\007\064\020\066\001\002\000\006\017" +
    "\131\023\132\001\002\000\004\017\130\001\002\000\016" +
    "\006\072\007\070\010\074\011\073\017\uffd7\023\uffd7\001" +
    "\002\000\006\017\uffd6\023\uffd6\001\002\000\010\004\063" +
    "\007\064\020\066\001\002\000\004\013\uffe3\001\002\000" +
    "\016\006\072\007\070\010\074\011\073\017\uffd8\023\uffd8" +
    "\001\002\000\010\004\063\007\064\020\066\001\002\000" +
    "\014\006\072\007\070\010\074\011\073\013\uffe0\001\002" +
    "\000\024\003\uffe8\015\uffe8\027\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\041\uffe8\001\002\000\006\024\ufff9" +
    "\042\ufff9\001\002\000\004\005\141\001\002\000\004\013" +
    "\uffe6\001\002\000\022\003\143\027\032\032\042\033\036" +
    "\034\041\035\037\036\035\041\043\001\002\000\026\003" +
    "\uffe7\013\uffdf\015\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\041\uffe7\001\002\000\022\003\143\027" +
    "\032\032\042\033\036\034\041\035\037\036\035\041\043" +
    "\001\002\000\022\003\143\027\032\032\042\033\036\034" +
    "\041\035\037\036\035\041\043\001\002\000\022\003\143" +
    "\027\032\032\042\033\036\034\041\035\037\036\035\041" +
    "\043\001\002\000\024\003\143\015\uffeb\027\032\032\042" +
    "\033\036\034\041\035\037\036\035\041\043\001\002\000" +
    "\004\015\uffea\001\002\000\014\003\156\027\152\030\161" +
    "\031\160\034\154\001\002\000\004\016\204\001\002\000" +
    "\004\013\203\001\002\000\004\016\177\001\002\000\004" +
    "\015\176\001\002\000\020\003\ufff4\013\uffec\015\ufff6\027" +
    "\ufff4\030\ufff4\031\ufff4\034\ufff4\001\002\000\014\003\172" +
    "\027\152\030\161\031\160\034\154\001\002\000\004\016" +
    "\166\001\002\000\004\016\162\001\002\000\004\022\163" +
    "\001\002\000\006\003\050\005\051\001\002\000\006\017" +
    "\053\023\165\001\002\000\004\013\uffee\001\002\000\004" +
    "\022\167\001\002\000\012\003\126\004\063\007\064\020" +
    "\066\001\002\000\006\017\131\023\171\001\002\000\004" +
    "\013\uffed\001\002\000\020\003\ufff4\013\uffec\015\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\034\ufff4\001\002\000\014\003\172" +
    "\027\152\030\161\031\160\034\154\001\002\000\014\003" +
    "\172\027\152\030\161\031\160\034\154\001\002\000\004" +
    "\015\ufff7\001\002\000\006\024\ufffa\042\ufffa\001\002\000" +
    "\004\022\200\001\002\000\006\003\060\014\062\001\002" +
    "\000\006\017\105\023\202\001\002\000\004\013\uffef\001" +
    "\002\000\016\003\ufff5\015\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\034\ufff5\001\002\000\004\005\205\001\002\000\004\013" +
    "\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\014\002\012\003\006\004\003\021\010\022" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\023\001\001\000\010\004\021\021\022\022\011\001" +
    "\001\000\002\001\001\000\004\022\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\032\013\030\014\033\001" +
    "\001\000\006\013\141\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\064\001\001\000\002" +
    "\001\001\000\004\020\103\001\001\000\002\001\001\000" +
    "\004\020\066\001\001\000\002\001\001\000\004\020\077" +
    "\001\001\000\002\001\001\000\004\020\076\001\001\000" +
    "\004\020\075\001\001\000\004\020\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\107\001\001\000\002\001\001\000\004" +
    "\020\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\124\020\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\143\014\033\001" +
    "\001\000\002\001\001\000\006\013\144\014\033\001\001" +
    "\000\006\013\145\014\033\001\001\000\006\013\146\014" +
    "\033\001\001\000\006\013\147\014\033\001\001\000\002" +
    "\001\001\000\010\006\154\007\156\011\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\172\011\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\167\020\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\173\011\152\001\001\000\006\007\174\011\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//código que modifica el comportamiento del parser [sobreescribiendo o creado métodos]    
    private ManejadorGraficacion manejadorGraficacion;//para las axn de verificación de params previas a la creación y exe
    private ManejadorReportes manejadorReportes;//para los reportes de las operaciones y add los erres que pueden ser hallados con la propia gramática
    private AnalizadorSemantico analizadorSemantico;//para add los atrib a la tabla de símbolos    

    public Parser(Lexer lexer){//nuevo constructor
        super(lexer);        
    }    

    public void report_fatal_error(String message, Object info){
        manejadorReportes.reportarError((new ReporteError(info.toString(), -1, 
        -1, "Sintáctico", ReporteError.SEMANTIC_FATAL_ERROR)));
    }

    /*public void syntax_error(Symbol cur_token){
        if(cur_token!= null){
            manejadorReportes.reportarError((new ReporteError(cur_token.value.toString(), cur_token.left,
                    cur_token.right, "Sintáctico", ReporteError.SEMANTIC_SYNTAX_ERROR)));
        }//es decir que mientras no haya sido por no cumplir la sintaxis completa... deplano que con el otro tendré que hacer lo mismo, o si no funciona, ahí si con puro simb de recu ser+a...
    }//creo que por lo que veo en la docu, este y el unrecovered_se, siempre reciben un cur_token null...

    public void unrecovered_syntax_error(Symbol cur_token){
       if(cur_token!=null){
            manejadorReportes.reportarError((new ReporteError(cur_token.value.toString(), cur_token.left,
                    cur_token.right, "Sintáctico", ReporteError.SEMANTIC_UNRECOVERED_SYNTAX_ERROR)));    
        }
    }*///no voy a quitar este comentario porque al menos para la manera en que estabas trabajando con este proyecto, [yo supondría que tb con los demás] 
    //al sobreescribirlos se evita que actúen como tiene previamente establecido y eso hace que no se invoque al fatal_error el cual al ver todo esto, es 
    //el único que puede ser implementado y que resulta ser de mucha ayuda para que el parser no se detenga por un error fatal [cuando no entiende nadita de 
    //la estructura] y en algunos syntax_error, imagino que en otros de este tipo no ayuda a evitarlos porque si requeire de los simb de recu... xD
    
    protected int error_sync_size(){
        return 1;
    }//par que establezca que con un token bien leido basta para recuperarse...

    public void inicializarManejadores(ManejadorErroresExtra manejadorErroresExtra, ManejadorGraficacion elManejadorGraficacion){//Estos vienen del Lexer, por lo tanto podrías solo crear un getter si es que guardas estos en una var del proy previo a enviarla aquí o si no crea un getter para esas 2 aquí tb xD
        analizadorSemantico = manejadorErroresExtra.getAnalizadorSemantico();    
        this.manejadorReportes = manejadorErroresExtra.getManejadorReportes();        
        manejadorGraficacion = elManejadorGraficacion;        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//este código no es accesible desde el proyecto xD
 //solo se puede acceder a aquello que esté en el parser code puesto que es la clase global xD, entonces métodos para inicializar, setters (req en el exterior) y getters deben ser colocados allá xD
    private Herramienta herramienta = new Herramienta();
    
    private int filaContenido = -1, columnaContenido = -1;//esto será útil para el contenido que sea una cadena [creo que tb para número...]
    private ArrayList<String> listaCadenas = new ArrayList<>();
    private ArrayList<Double> listaNumeros = new ArrayList<>();
    private ArrayList<double[]> tuplas = new ArrayList<>();
    private ArrayList<Integer> listaLineas = new ArrayList<>();//esto es para los contenido de tipo Lista# y Tuplas [y si vas a revisar el contenido de los catálogos para warnear de que existen repitencias, tb para contenido de tipo listasCadenas...]
    private ArrayList<Integer> listaColumnas = new ArrayList<>();

//    private no se que iba a declarar aquí... pero era una var aux... quizá paraa tuplas o ub booleano o un contador... para saber que hacer... o era para el método que iab a hacer las conversiones a Array... xD        

    private Atributo crearAtributo_Simple(String tipoContenido, Simbolo representante, Simbolo contenido){
        if(tipoContenido.equals("cadena")){
            return new Atributo(representante, new ContenidoCadena(contenido.getLeft(), contenido.getRight(), contenido.getValue().toString()));//o bien podría enviar un String desde ellexer xD, aunque creo que el tipo nuevamente lo debo especificar aquí, sino auqnue asigne el tipo correspondiente desde el lexer, aquí no estarán informados de eso y por lo tanto tendré que hacer el casteo...                    
        }else{
            return new Atributo(representante, new ContenidoNumero(contenido.getLeft(), contenido.getRight(), (Double) contenido.getValue()));//o será un mejor un Dpubl.parseDouble()??? xD
        }
    }

    private Atributo crearAtributo_Listas(String tipoContenido, Simbolo representante){
        if(tipoContenido.equals("cadenas")){
            return new Atributo(representante, new ContenidoListaCadenas(-1, -1, listaCadenas.toArray(new String[listaCadenas.size()])));//envío -1 porque a menos que vayas a revisar si cada catálogo tiene elementos repetidos no voy a requerir el número de línea para listaCadenas [para listaNumeros solo para verificar si el valor es - en el catálogo de Pie, ah si cierto tb debo ver que en Unir no sean negativos...]
        }else if(tipoContenido.equals("numeros")){
            return new Atributo(representante, new ContenidoListaNumeros(herramienta.converToIntArray(listaLineas),
             herramienta.converToIntArray(listaColumnas), herramienta.converToDoubleArray(listaNumeros)));
        }else{
            return new Atributo(representante, new ContenidoTuplas(herramienta.converToIntArray(listaLineas),
                herramienta.converToIntArray(listaColumnas), herramienta.converToArrayListOfDoubleArray(tuplas)));
        }
    }

    private Reporte crearReporte(String tipoReporte, Simbolo simbolo, String descripcion, String tipo, int lineaError, int columnaError){//tipoReporte = operacion o error
        if(tipoReporte.equals("operacion")){
            return new Reporte(simbolo.getValue().toString(), simbolo.getLeft(), simbolo.getRight(), descripcion);//el toString() lo puedo usar libremente puesto que el valor o es un String o un Double no más xD
        }else{
            if(simbolo == null){//quiere decir que no existe el T que se esperaba
                return new ReporteError(concatExpected(), lineaError, columnaError, tipo, ReporteError.SEMANTIC_PARSER_EXPECTED);
            }else{
                return new ReporteError(simbolo.getValue().toString(), simbolo.getLeft(), simbolo.getRight(), tipo, descripcion);
            }
            
        }
    }

    private String concatExpected(){
        List<Integer> expected = expected_token_ids();
        int tokensAMostrar = ((expected.size()>3)?3:expected.size());
        String lista = "";

        for(int idActual = 0; idActual < tokensAMostrar; idActual++){
            lista += symbl_name_from_id(expected.get(idActual)) + " ";
        }
        return lista;
    }   


//mientras haces pruebas xD
private void mostrarContenidoListasCadenas(){
        for(int i = 0; i<listaCadenas.size(); i++){
            System.out.println(listaCadenas.get(i));
        }
    }

    private void mostrarContenidoListasNumeros(){
        for(int i = 0; i<listaNumeros.size(); i++){
            System.out.println(listaNumeros.get(i));
        }
    }

    private void mostrarContenidoTuplas(){
        for(int i = 0; i<tuplas.size(); i++){
            System.out.println(tuplas.get(i)[0]+","+tuplas.get(i)[1]);            
        }
    }

    private void resetInfo_Listas(){//hay que revisarla y si se empleará, decidir dónde        
            listaCadenas.clear();                    
            listaNumeros.clear();
            filaContenido = columnaContenido = -1;//pero por si acaso tb debería limpiarse aquí xD y no solo en el error de val#...
            tuplas.clear();
    }

    //en realidad no debe haber un getter para el analizadorSem porque lo puedes obtener a través de la clase ErroresExtra y a esa puedes acceder desde el proyecto xD

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= primerseccion segundaSeccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= segundaSeccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_ERROR_SECTION_STRUCT + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_ERROR_SECTION_STRUCT + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primerseccion ::= primerseccion definicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primerseccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primerseccion ::= definicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primerseccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicion ::= DEF grafico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definicion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // grafico ::= BARRAS LLAVE_A cuerpoBarra LLAVE_C 
            {
              Object RESULT =null;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo tipoGrafica = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] estudiar gráfica " + tipoGrafica.getValue());manejadorGraficacion.analizarGraficaDefinida(tipoGrafica);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grafico ::= PIE LLAVE_A cuerpoPie LLAVE_C 
            {
              Object RESULT =null;
		int tipoGraficaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipoGraficaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo tipoGrafica = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("[S] estudiar gráfica " + tipoGrafica.getValue());manejadorGraficacion.analizarGraficaDefinida( tipoGrafica);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // grafico ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_BAD_DEFINITION_STRUCT + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_DEFINITION_STRUCT + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grafico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpoBarra ::= paramBarra paramBarra paramBarra paramBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoBarra",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpoBarra ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_NUMBER_OF_PARAMS_B);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_NUMBER_OF_PARAMS_B, "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoBarra",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramBarra ::= atribBarra PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBarra",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramBarra ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_EXPECTED_SEMICOLON);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_EXPECTED_SEMICOLON, "Semántico", errleft, errright)));
                                                                                                resetInfo_Listas();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramBarra",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tupla ::= tupla COMA LLAVE_A valNumerico COMA valNumerico LLAVE_C 
            {
              Object RESULT =null;
		int repTuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int repTuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo repTupla = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valorXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valorXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double valorX = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double valorY = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		tuplas.add(new double[]{valorX, valorY});
                                                                                                listaLineas.add(repTupla.getLeft()); listaColumnas.add(repTupla.getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tupla ::= LLAVE_A valNumerico COMA valNumerico LLAVE_C 
            {
              Object RESULT =null;
		int repTuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int repTuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo repTupla = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valorXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valorXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double valorX = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double valorY = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		tuplas.add(new double[]{valorX, valorY});
                                                                                                listaLineas.add(repTupla.getLeft()); listaColumnas.add(repTupla.getRight());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tupla ::= error COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(ReporteError.SEMANTIC_BAD_COUPLE);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_COUPLE, "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atribBarra ::= TITULO DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] cadena (titulo): "+ contenido.getValue()); analizadorSemantico.setAtributo(crearAtributo_Simple("cadena", representante, contenido));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribBarra",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atribBarra ::= UNIR DOS_PUNTOS CORCHETE_A tupla CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoTuplas();analizadorSemantico.setAtributo(crearAtributo_Listas("tuplas", representante));
                                                                                                tuplas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribBarra",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atribBarra ::= EJEX DOS_PUNTOS CORCHETE_A listaCadenas CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoListasCadenas();analizadorSemantico.setAtributo(crearAtributo_Listas("cadenas", representante));
                                                                                                listaCadenas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribBarra",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atribBarra ::= EJEY DOS_PUNTOS CORCHETE_A listaNumeros CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoListasNumeros();analizadorSemantico.setAtributo(crearAtributo_Listas("numeros", representante));
                                                                                                listaNumeros.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribBarra",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atribBarra ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_BAD_ATRIB_BARRAS_STRUCT + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_ATRIB_BARRAS_STRUCT + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribBarra",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoPie ::= paramPie paramPie paramPie paramPie paramPie paramPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoPie ::= paramPie paramPie paramPie paramPie paramPie paramPie paramPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoPie ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_NUMBER_OF_PARAMS_P);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_NUMBER_OF_PARAMS_P, "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramPie ::= atribPie PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramPie",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramPie ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_EXPECTED_SEMICOLON);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_EXPECTED_SEMICOLON, "Semántico", errleft, errright)));
                                                                                                 resetInfo_Listas();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramPie",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atribPie ::= TITULO DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] cadena (titulo): "+ contenido.getValue()); analizadorSemantico.setAtributo(crearAtributo_Simple("cadena", representante, contenido));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atribPie ::= UNIR DOS_PUNTOS CORCHETE_A tupla CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoTuplas();analizadorSemantico.setAtributo(crearAtributo_Listas("tuplas", representante));
                                                                                                tuplas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atribPie ::= ETIQUETAS DOS_PUNTOS CORCHETE_A listaCadenas CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoListasCadenas();analizadorSemantico.setAtributo(crearAtributo_Listas("cadenas", representante));
                                                                                                  listaCadenas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atribPie ::= VALORES DOS_PUNTOS CORCHETE_A listaNumeros CORCHETE_C 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		mostrarContenidoListasNumeros();analizadorSemantico.setAtributo(crearAtributo_Listas("numeros", representante));
                                                                                                  listaNumeros.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atribPie ::= EXTRA DOS_PUNTOS CADENA 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] cadena (extra)"+ contenido.getValue());analizadorSemantico.setAtributo(crearAtributo_Simple("cadena", representante, contenido));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atribPie ::= TIPO DOS_PUNTOS elTipo 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] cadena (tipo)"+ contenido.getValue());analizadorSemantico.setAtributo(crearAtributo_Simple("cadena", representante, contenido));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atribPie ::= TOTAL DOS_PUNTOS valNumerico 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("[S] numero (total)"+ valor);analizadorSemantico.setAtributo(crearAtributo_Simple("numero", representante, new Simbolo(ParserSym.NUMERO, filaContenido, columnaContenido, valor, null)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atribPie ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_BAD_ATRIB_PIE_STRUCT + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_ATRIB_PIE_STRUCT + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribPie",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elTipo ::= CANTIDAD 
            {
              Simbolo RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = contenido;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elTipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elTipo ::= PORCENTAJE 
            {
              Simbolo RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo contenido = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = contenido;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elTipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elTipo ::= error PUNTO_COMA 
            {
              Simbolo RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(ReporteError.SEMANTIC_INVALID_TOTAL_TYPE);manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_INVALID_TOTAL_TYPE, "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elTipo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaCadenas ::= listaCadenas COMA CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo cadena = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listaCadenas.add((String) cadena.getValue());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCadenas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaCadenas ::= CADENA 
            {
              Object RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo cadena = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listaCadenas.add((String) cadena.getValue());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCadenas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaCadenas ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(ReporteError.SEMANTIC_BAD_STRING_LIST_STRUCT + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_STRING_LIST_STRUCT + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCadenas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaNumeros ::= listaNumeros COMA valNumerico 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listaNumeros.add(valor);
                                                                              listaLineas.add(filaContenido); listaColumnas.add(columnaContenido);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaNumeros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaNumeros ::= valNumerico 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listaNumeros.add(valor);
                                                                               listaLineas.add(filaContenido); listaColumnas.add(columnaContenido);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaNumeros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaNumeros ::= error COMA 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println(ReporteError.SEMANTIC_BAD_NUMBER_EXPRESION + concatExpected());manejadorReportes.reportarError((ReporteError) (crearReporte("error", (Simbolo) err, ReporteError.SEMANTIC_BAD_NUMBER_EXPRESION + concatExpected(), "Semántico", errleft, errright)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaNumeros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valNumerico ::= valNumerico SUMA valNumerico 
            {
              Double RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double valor1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo operacion = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = valor1 + valor2;System.out.println("[S] suma"+RESULT);
                                                                             manejadorReportes.reportarOperacion(crearReporte("operacion", operacion, (operacion.getAnterior().getValue().toString()+operacion.getValue().toString()+operacion.getSiguiente().getValue().toString()),"", -1, -2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valNumerico ::= valNumerico RESTA valNumerico 
            {
              Double RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double valor1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo operacion = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = valor1 - valor2;System.out.println("[S] resta"+RESULT);
                                                                             manejadorReportes.reportarOperacion(crearReporte("operacion", operacion, (operacion.getAnterior().getValue().toString()+operacion.getValue().toString()+operacion.getSiguiente().getValue().toString()),"", -2, -2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valNumerico ::= valNumerico MULTI valNumerico 
            {
              Double RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double valor1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo operacion = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = valor1 * valor2;System.out.println("[S] multi"+RESULT);
                                                                             manejadorReportes.reportarOperacion(crearReporte("operacion", operacion, (operacion.getAnterior().getValue().toString()+operacion.getValue().toString()+operacion.getSiguiente().getValue().toString()),"", -3, -2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valNumerico ::= valNumerico DIV valNumerico 
            {
              Double RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double valor1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo operacion = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = valor1 / valor2;System.out.println("[S] div"+RESULT);
                                                                             manejadorReportes.reportarOperacion(crearReporte("operacion", operacion, (operacion.getAnterior().getValue().toString()+operacion.getValue().toString()+operacion.getSiguiente().getValue().toString()),"", -4, -2));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valNumerico ::= NUMERO 
            {
              Double RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo numero = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ((Double) numero.getValue());System.out.println("[S] numero [op] "+RESULT);
                                                                             filaContenido = numero.getLeft(); columnaContenido = numero.getRight();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valNumerico ::= RESTA valNumerico 
            {
              Double RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo operacion = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = -valor;System.out.println("[S] menos"+RESULT);
                                                                              manejadorReportes.reportarOperacion(crearReporte("operacion", operacion, (operacion.getValue().toString()+operacion.getSiguiente().getValue().toString()),"", -5, -2));
                                                                              filaContenido = operacion.getLeft(); columnaContenido = operacion.getRight();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valNumerico ::= PARENTESIS_A valNumerico PARENTESIS_C 
            {
              Double RESULT =null;
		int parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo parentesis = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = valor;System.out.println("[S] agrupacion"+RESULT);
                                                                             filaContenido = parentesis.getLeft(); columnaContenido = parentesis.getRight();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valNumerico",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // segundaSeccion ::= segundaSeccion exe 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("segundaSeccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // segundaSeccion ::= exe 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("segundaSeccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exe ::= EJECUTAR PARENTESIS_A CADENA PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int representanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int representanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo representante = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo titulo = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("[S] ejecutar: "+titulo.getValue());manejadorGraficacion.analizarEjecucion(crearAtributo_Simple("cadena", representante, titulo));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exe",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
